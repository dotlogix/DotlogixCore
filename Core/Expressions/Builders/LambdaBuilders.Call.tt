<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="C:\Program Files\dotnet\sdk\5.0.301\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll" #>
<#@ assembly name="C:\Users\alexa\source\git\c-sharp\DotLogix\Core\assemblies\Release\DotLogix.Core\netstandard2.0\DotLogix.Core.dll" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using DotLogix.Core.Extensions;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {
        public static LambdaBuilder<TResult> Call<TResult>(this LambdaBuilder instance, string methodName, params LambdaBuilder[] args) {
            return Call<TResult>(instance, methodName, args.AsEnumerable());
        }

        public static LambdaBuilder<TResult> Call<TResult>(this LambdaBuilder instance, string methodName, IEnumerable<LambdaBuilder> args) {
            args = args.AsReadOnlyCollection();
            return Call<TResult>(instance, ResolveMethod(instance, methodName, args), args);
        }

        public static LambdaBuilder<TResult> Call<TResult>(this LambdaBuilder instance, MethodInfo methodInfo, params LambdaBuilder[] args) {
            return Call<TResult>(instance, methodInfo, args.AsReadOnlyCollection());
        }

        public static LambdaBuilder<TResult> Call<TResult>(this LambdaBuilder instance, MethodInfo methodInfo, IEnumerable<LambdaBuilder> args) {
            args = args.AsReadOnlyCollection();
            var expression = Expression.Call(instance.Body, methodInfo, args.Select(a => a.Body).ToArray());
            return new LambdaBuilder<TResult>(expression);
        }

<#
    for (var i = 0; i <= 10; i++)
    {
        var range = Enumerable.Range(1, i).ToList();
        var genericNames = string.Join(", ", range.Select(r => $"T{r}").Append("TResult"));
        var paramNames = string.Join(", ", range.Select(r => $"LambdaBuilder<T{r}> arg{r}"));
        var argNames = string.Join(", ", range.Select(r => $"arg{r}"));
#>
        public static LambdaBuilder<TResult> Call<<#=genericNames#>>(this LambdaBuilder instance, Func<<#=genericNames#>> method<#=paramNames.Length > 0 ? ", "+ paramNames : ""#>) {
            return Call<TResult>(instance, method.Method<#=argNames.Length > 0 ? ", "+argNames : ""#>);
        }
<#
    }
#>
    
        #region Helpers      
        private static MethodInfo ResolveMethod(LambdaBuilder instance, string methodName, IEnumerable<LambdaBuilder> lambdaBuilders) {
            var types = lambdaBuilders.Select(b => b.Type).ToArray();
#if NETSTANDARD2_1
            return instance.Type.GetMethod(methodName, 0, BindingFlags.Instance, default, CallingConventions.Any, types, default);
#else
            return instance.Type.GetMethod(methodName, BindingFlags.Instance, default, CallingConventions.Any, types, default);
#endif
        }
        private static MethodInfo ResolveStaticMethod(Type type, string methodName, IEnumerable<LambdaBuilder> lambdaBuilders) {
            var types = lambdaBuilders.Select(b => b.Type).ToArray();
#if NETSTANDARD2_1
            return type.GetMethod(methodName, 0, BindingFlags.Static, default, CallingConventions.Any, types, default);
#else
            return type.GetMethod(methodName, BindingFlags.Static, default, CallingConventions.Any, types, default);
#endif
        }
        #endregion
    }
}