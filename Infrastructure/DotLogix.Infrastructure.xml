<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotLogix.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorAttribute">
            <summary>
            An attribute to describe an <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1"/> which should be applied to this class
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorAttribute.DecoratorType">
            <summary>
            The decorator type
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorAttribute.GetModifierFunc``1">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetModifierAttribute">
            <summary>
            An attribute to describe to apply a function to an <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Decorators.EntitySetModifierAttribute.Priority">
            <summary>
            The execution priority compared to other modifiers
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetModifierAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetModifierAttribute"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetModifierAttribute.GetModifierFunc``1">
            <summary>
            Creates a modification function which will be applied after a new <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/> is created
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyAttribute">
            <summary>
            An <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorAttribute"/> to apply an <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1"/> to applied class
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyAttribute"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1">
            <summary>
            A decorator for <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/> to intercept requests
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.BaseEntitySet">
            <summary>
            The internal base entity set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.Query">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.ReAttach(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.EntitySetDecoratorBase`1.ReAttachRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedAttribute">
            <summary>
            An attribute to apply an <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1"/> to a <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedAttribute"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedAttribute.GetModifierFunc``1">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedAttribute.OnCreateCache``1">
            <summary>
            A callback function to create the underlying entity index
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1">
            <summary>
            A decorator class for <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/> to allow cached random access to already loaded entities
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.Index">
            <summary>
            The internal entity index
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0},DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0},System.Func{DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex{`0}})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.ReAttach(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.ReAttachRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.Query">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.IndexedEntitySetDecorator`1.OnCreateCache">
            <summary>
            A callback function to create the underlying entity index
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1">
            <summary>
            A entity set decorator to disable deletion of entities instead manage existence with the is active flag
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.Remove(`0)">
            <summary>
            Mark a single entity as deleted by setting its IsActive flag to false
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Mark a range of entities as deleted by setting their IsActive flag to false
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.InsertOnlyEntitySetDecorator`1.Query">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1">
            <summary>
            A decorator to force ordered results after querying
            </summary>
            <typeparam name="TEnity"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0})">
            <summary>
            Creates a new instance eof <see cref="T:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.Query">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Decorators.OrderedEntitySetDecorator`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Attributes.ManyToOneAttribute">
            <summary>
            An attribute to declare a many to one relationship
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Attributes.ManyToOneAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Attributes.ManyToOneAttribute"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute">
            <summary>
            An attribute to declare a navigation attribute
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute.TargetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute.SourceProp">
            <summary>
            The source property name
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute.TargetProp">
            <summary>
            The target property name
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute.Type">
            <summary>
            The type of relationship between the properties
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute.#ctor(System.Type,DotLogix.Architecture.Infrastructure.Attributes.RelationshipType,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Attributes.NavigationAttribute"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Attributes.OneToManyAttribute">
            <summary>
            An attribute to declare a one to many relationship
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Attributes.OneToManyAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Attributes.OneToManyAttribute"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Attributes.OneToOneAttribute">
            <summary>
            An attribute to declare a one to one relationship
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Attributes.OneToOneAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Attributes.OneToManyAttribute"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Attributes.RelationshipType">
            <summary>
            Relationship types
            </summary>
        </member>
        <member name="F:DotLogix.Architecture.Infrastructure.Attributes.RelationshipType.ManyToOne">
            <summary>
            Many to one
            </summary>
        </member>
        <member name="F:DotLogix.Architecture.Infrastructure.Attributes.RelationshipType.OneToMany">
            <summary>
            One to many
            </summary>
        </member>
        <member name="F:DotLogix.Architecture.Infrastructure.Attributes.RelationshipType.OneToOne">
            <summary>
            One to one
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.Base.Entity">
            <summary>
            A simple entity implementing the <see cref="T:DotLogix.Architecture.Infrastructure.Entities.IEntity"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Entities.Base.Entity.Order">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.Base.InsertOnlyEntity">
            <summary>
            A simple entity implementing the <see cref="T:DotLogix.Architecture.Infrastructure.Entities.ISimpleEntity"/> and the <see cref="T:DotLogix.Architecture.Infrastructure.Entities.IInsertOnlyEntity"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Entities.Base.InsertOnlyEntity.IsActive">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.Base.NamedEntity">
            <summary>
            A simple entity implementing the <see cref="T:DotLogix.Architecture.Infrastructure.Entities.IEntity"/> and the <see cref="T:DotLogix.Architecture.Common.Options.INamed"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Entities.Base.NamedEntity.Name">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.Base.SimpleEntity">
            <summary>
            A simple entity implementing the <see cref="T:DotLogix.Architecture.Infrastructure.Entities.ISimpleEntity"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Entities.Base.SimpleEntity.Id">
            <inheritdoc />
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Entities.Base.SimpleEntity.Guid">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.IEntity">
            <summary>
            An interface combining <see cref="T:DotLogix.Architecture.Infrastructure.Entities.IInsertOnlyEntity"/> and <see cref="T:DotLogix.Architecture.Common.Options.IOrdered"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.IInsertOnlyEntity">
            <summary>
            An interface combining <see cref="T:DotLogix.Architecture.Infrastructure.Entities.ISimpleEntity"/> and <see cref="T:DotLogix.Architecture.Common.Options.IInsertOnly"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.IGuidIndexedEntity">
            <summary>
            An interface to activate second level caching for <see cref="T:DotLogix.Architecture.Infrastructure.Entities.ISimpleEntity"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Entities.ISimpleEntity">
            <summary>
            An interface combining <see cref="T:DotLogix.Architecture.Common.Options.IIdentity"/> and <see cref="T:DotLogix.Architecture.Common.Options.IGuid"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1">
            <summary>
            A simple guid and id indexed entity collection
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1.ById">
            <summary>
            The underlying entity collection for id caching
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1.ByGuid">
            <summary>
            The underlying entity collection for guid caching
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection{System.Int32,`0},DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection{System.Guid,`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityIndex`1"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2">
            <summary>
            A key indexed entity collection
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.#ctor(System.Func{`1,`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.TryGetRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}@,System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Get a range of entities by their key and also return all missing keys
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.AddOrUpdateRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Add or update a range of entities by their key and also return all missing keys
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.TryRemoveRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Tries to remove a range of entities by their key and also return all missing keys
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.MarkNonPresent(`0)">
            <summary>
            Mark a single entity as non present
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2.MarkRangeNonPresent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Mark a range of entities as non present
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`1">
            <summary>
            A guid indexed <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`2"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntityCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1">
            <summary>
            A base implementation of an entity set
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by id
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.ReAttach(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.ReAttachRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.Query">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.EntitySetBase`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get all entities matching an expression
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext">
            <summary>
            An interface to represent an entity context
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext.Variables">
            <summary>
            The context variables
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext.CompleteAsync">
            <summary>
            Complete the underlying unit of work and commit all changes to entities
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory">
            <summary>
            An interface to represent a factory to create an <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory.Create">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1">
            <summary>
            An interface for entity sets
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.Query">
            <summary>
            Create a linq style query to allow more advanced requests to the entity set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by id
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a range of entities by id
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Get a range of entities by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get all entities matching an expression
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.Add(`0)">
            <summary>
            Add a single entity to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of entities to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.Remove(`0)">
            <summary>
            Remove a single entity from the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove a range of entities from the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.ReAttach(`0)">
            <summary>
            Reattach a single entity to the underlying change tracker
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1.ReAttachRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Reattach a range of entities to the underlying change tracker
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider">
            <summary>
            An interface to represent a provider of <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider.UseSet``1">
            <summary>
            Get or create an <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet`1"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.IOrderedQuery`1">
            <summary>
            An ordered extension of the <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/> interface
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.IOrderedQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the query by another key if the previous one is equal
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.IOrderedQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the query by another key in descending order if the previous one is equal
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.IQueryExecutor`1">
            <summary>
            An interface to represent a query executor
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory">
            <summary>
            An interface to represent a factory creating objects used for <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory.CreateQuery``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <summary>
            Create a new query based on an <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory.CreateQuery``1(System.Linq.IOrderedQueryable{``0},System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <summary>
            Create a new query based on an <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IOrderedQuery`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory.CreateExecutor``1(DotLogix.Architecture.Infrastructure.Queries.IQuery{``0})">
            <summary>
            Create a new query executor for a <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor">
            <summary>
                An interface to represent an interceptor of a query
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor.BeforeExecute``1(DotLogix.Architecture.Infrastructure.Queries.IQuery{``0})">
            <summary>
                Executes a callback method before the query is executed
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor.AfterExecute``1(``0)">
            <summary>
                Executes a callback method after the query is executed
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.OrderedQueryableQuery`1">
            <summary>
            An extension of the <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1"/> to allow multi level ordering
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.OrderedQueryableQuery`1.#ctor(System.Linq.IOrderedQueryable{`0},DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory,System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.OrderedQueryableQuery`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.OrderedQueryableQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.OrderedQueryableQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/> interface using <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.#ctor(System.Linq.IQueryable{`0},DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory,System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.QueryExecutor">
            <inheritdoc />
        </member>
        <member name="F:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.InterceptorList">
            <summary>
            The internal interceptor list
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Interceptors">
            <inheritdoc />
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.InnerQueryable">
            <summary>
            The internal <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SelectMany``2(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SelectMany``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Join``3(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``0,``2}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Take(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.TakeWhile(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.TakeWhile(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Skip(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SkipWhile(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.SkipWhile(System.Linq.Expressions.Expression{System.Func{`0,System.Int32,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.GroupBy``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1}})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Distinct">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Concat(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Except(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.Reverse">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.InterceptQuery(DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.CreateQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/> using the internal <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.CreateQuery``1(System.Linq.IOrderedQueryable{``0})">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IOrderedQuery`1"/> using the internal <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1.CreateExecutor">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQueryExecutor`1"/> using the internal <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQueryExecutor`1"/> interface using an <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.#ctor(DotLogix.Architecture.Infrastructure.Queries.IQuery{`0})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.ToAsyncEnumerable">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.ToQueryable">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AnyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.CountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LongCountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.FirstAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LastAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LastAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LastOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SingleAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.MinAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.MaxAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryExecutor`1.ContainsAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryableQueryFactory"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory.Instance">
            <summary>
            The static singleton instance
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory.#ctor">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQuery`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory.CreateQuery``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory.CreateQuery``1(System.Linq.IOrderedQueryable{``0},System.Collections.Generic.IEnumerable{DotLogix.Architecture.Infrastructure.Queries.Queryable.IQueryInterceptor})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryableQueryFactory.CreateExecutor``1(DotLogix.Architecture.Infrastructure.Queries.IQuery{``0})">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryExtensions">
            <summary>
            A static class providing extension methods for <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryInterceptor">
            <summary>
            An interceptor for <see cref="T:DotLogix.Architecture.Infrastructure.Queries.IQuery`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryInterceptor.#ctor(System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryInterceptor"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryInterceptor.BeforeExecute``1(DotLogix.Architecture.Infrastructure.Queries.IQuery{``0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Queries.Queryable.QueryInterceptor.AfterExecute``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory">
            <summary>
            A <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.IRepositoryFactory"/> using reflection with il code to create instances
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory.#ctor(DotLogix.Core.Reflection.Dynamics.DynamicCtor)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory.Create(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <summary>
            Creates a new repository
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory.CreateFor``1">
            <summary>
            Creates a repository factory using a constructor of the shape .ctor(<see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider"/>)
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory.CreateFor(System.Type)">
            <summary>
            Creates a repository factory using a constructor of the shape .ctor(<see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider"/>)
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.IRepositoryFactory">
            <summary>
            An interface to represent a factory creating <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.IRepositoryFactory.Create(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <summary>
            Get or create an instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.RepositoryFactory">
            <summary>
            A <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.IRepositoryFactory"/> using a callback method to create instances
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.RepositoryFactory.#ctor(System.Func{DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider,DotLogix.Architecture.Infrastructure.Repositories.IRepository})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.RepositoryFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Factories.RepositoryFactory.Create(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository">
            <summary>
            A non generic marker interface for repository types
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1">
            <summary>
            An interface to represent a repository
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by id
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get a range of entities by id
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Get a range of entities by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get all entities matching an expression
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.Add(`0)">
            <summary>
            Add a single entity to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of entities to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.Remove(`0)">
            <summary>
            Remove a single entity from the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove a range of entities from the set
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider">
            <summary>
            An interface to represent a provider for <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider.Create``1(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <summary>
            Get or create an instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.RepositoryProvider">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Repositories.Provider.RepositoryProvider.RepositoryFactories">
            <summary>
            The internal registered repository factories
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Provider.RepositoryProvider.Create``1(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Provider.RepositoryProvider.RegisterFactory(System.Type,DotLogix.Architecture.Infrastructure.Repositories.Factories.IRepositoryFactory)">
            <summary>
            Registers a factory new factory
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.Provider.RepositoryProvider.RegisterFactory(System.Type,System.Type)">
            <summary>
            Registers a new <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Factories.DynamicRepositoryFactory"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1">
            <summary>
                A basic generic repository providing crud functionality
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.ModifyEntitySetAttributeCache">
            <summary>
                The cached list of entity set modifiers
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.EntitySet">
            <summary>
                The internal entity set
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.EntitySetProvider">
            <summary>
                The internal entity set provider
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySetProvider)">
            <summary>
                Creates a new instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1" />
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.GetRangeAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.FilterAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.OnModifyEntitySet(DotLogix.Architecture.Infrastructure.EntityContext.IEntitySet{`0})">
            <summary>
                A callback method to apply the entity set modifiers
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryBase`1.CreateEntitySetModifiers">
            <summary>
                A callback method to create the entity set modifiers
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Infrastructure.Repositories.RepositoryExtensions">
            <summary>
            A static class providing extension methods for <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryExtensions.RemoveWhereAsync``1(DotLogix.Architecture.Infrastructure.Repositories.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Queries the matching entities and remove them
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryExtensions.RemoveByIdAsync``1(DotLogix.Architecture.Infrastructure.Repositories.IRepository{``0},System.Int32)">
            <summary>
            Queries the matching entity and remove it
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Infrastructure.Repositories.RepositoryExtensions.RemoveByGuidAsync``1(DotLogix.Architecture.Infrastructure.Repositories.IRepository{``0},System.Guid)">
            <summary>
            Queries the matching entity and remove it
            </summary>
        </member>
    </members>
</doc>
