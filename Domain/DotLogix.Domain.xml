<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotLogix.Domain</name>
    </assembly>
    <members>
        <member name="T:DotLogix.Architecture.Domain.Context.DomainContext">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Context.DomainContext.DomainServiceProvider">
            <summary>
            The internal domains service provider
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Context.DomainContext.Variables">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.DomainContext.#ctor(DotLogix.Architecture.Domain.Services.Providers.IDomainServiceProvider)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Context.DomainContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.DomainContext.UseService``1(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Context.Factories.DomainContextFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Context.Factories.IDomainContextFactory"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Context.Factories.DomainContextFactory.DomainServiceProvider">
            <summary>
            The internal domain context provider
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.Factories.DomainContextFactory.#ctor(DotLogix.Architecture.Domain.Services.Providers.IDomainServiceProvider)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Context.Factories.DomainContextFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.Factories.DomainContextFactory.Create">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Context.Factories.IDomainContextFactory">
            <summary>
            An interface to represent a factory to create a <see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.Factories.IDomainContextFactory.Create">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Context.IDomainContext">
            <summary>
            An interface to represent a domain context
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Context.IDomainContext.Variables">
            <summary>
            The context variables
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Context.IDomainContext.UseService``1(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <summary>
            Get or create a service
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2">
            <summary>
            A basic implementation of the <see cref="T:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2"/> for 1:1 mapping of entities to their corresponding model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.MapEntityToModel(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.MapModelToEntity(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToModel(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToModel``1(`0)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToModels(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToModels``1(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToEntity(`1)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.EntityMapperBase`2.ToEntities(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2">
            <summary>
            A basic implementation of the <see cref="T:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2"/> using reflection and shallow copying for 1:1 mapping of entities to their corresponding model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2.#ctor(System.Boolean,System.Action{DotLogix.Core.Utils.Mappers.MapBuilder{`0,`1}},System.Action{DotLogix.Core.Utils.Mappers.MapBuilder{`1,`0}})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2.MapEntityToModel(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2.MapModelToEntity(`0,`1)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.IParamMapper`2">
            <summary>
            An interface for 1:1 mapping of params with their corresponding entities
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IParamMapper`2.MapParamsToEntity(`0,`1)">
            <summary>
            Maps a param model to its corresponding entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IParamMapper`2.ToEntity(`0)">
            <summary>
            Maps a param model to a new entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IParamMapper`2.ToEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps a range of param models to new entities
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.FluentParamMapper`2">
            <summary>
            A basic implementation of the <see cref="T:DotLogix.Architecture.Domain.Mapper.IParamMapper`2"/> using reflection and shallow copying for 1:1 mapping of entities to their corresponding model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentParamMapper`2.#ctor(System.Boolean,System.Boolean,System.Action{DotLogix.Core.Utils.Mappers.MapBuilder{`0,`1}})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Mapper.FluentEntityMapper`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentParamMapper`2.MapParamsToEntity(`0,`1)">
            <summary>
            Maps a param model to its corresponding entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentParamMapper`2.ToEntity(`0)">
            <summary>
            Maps a param model to a new entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.FluentParamMapper`2.ToEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps a range of param models to new entities
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2">
            <summary>
            An interface for 1:1 mapping of entities with their corresponding model
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.MapEntityToModel(`0,`1)">
            <summary>
            Maps an entity to its corresponding model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.MapModelToEntity(`0,`1)">
            <summary>
            Maps an model to its corresponding entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToModel(`0)">
            <summary>
            Maps an entity to a new model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToModel``1(`0)">
            <summary>
            Maps an entity to a new model derived of the original one
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToModels(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps a range of entities to new models
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToModels``1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Maps a range of entities to new models derived of the original one
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToEntity(`1)">
            <summary>
            Maps a model to a new entity
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2.ToEntities(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Maps a range of models to new entities
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2">
            <summary>
            A basic implementation of the <see cref="T:DotLogix.Architecture.Domain.Mapper.IEntityMapper`2"/> using reflection and shallow copying for 1:1 mapping of entities to their corresponding model
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2.#ctor(DotLogix.Core.Reflection.Projections.CreateProjectionsCallback)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2.#ctor(DotLogix.Core.Reflection.Projections.IProjectionFactory)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2.MapEntityToModel(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Mapper.ProjectionEntityMapper`2.MapModelToEntity(`0,`1)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.Base.InsertOnlyModel">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Models.IInsertOnlyModel"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Models.Base.InsertOnlyModel.IsActive">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.Base.Model">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Models.IInsertOnlyModel"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Models.Base.Model.Order">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.Base.NamedModel">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Models.IModel"/> and the <see cref="T:DotLogix.Architecture.Common.Options.INamed"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Models.Base.NamedModel.Name">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.Base.SimpleModel">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Models.ISimpleModel"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Models.Base.SimpleModel.Guid">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.IInsertOnlyModel">
            <summary>
            An interface combining <see cref="T:DotLogix.Architecture.Domain.Models.ISimpleModel"/> and <see cref="T:DotLogix.Architecture.Common.Options.IInsertOnly"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.IModel">
            <summary>
            An interface combining <see cref="T:DotLogix.Architecture.Domain.Models.IInsertOnlyModel"/> and <see cref="T:DotLogix.Architecture.Common.Options.IOrdered"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Models.ISimpleModel">
            <summary>
            An interface for simple models implementing the <see cref="T:DotLogix.Architecture.Common.Options.IGuid"/> interface
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.DomainServiceBase">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Services.IDomainService"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Services.DomainServiceBase.DomainContext">
            <summary>
            The internal domain context
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Services.DomainServiceBase.UowContextFactory">
            <summary>
            The internal unit of work factory
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.DomainServiceBase.#ctor(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Services.DomainServiceBase"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.DomainServiceBase.BeginContext">
            <summary>
            Begin a new unit of work context
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.DomainServiceBase.UseService``1(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <summary>
            Get another service running in a nested unit of work context
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.Factories.DomainServiceFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Services.Factories.IDomainServiceFactory"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Services.Factories.DomainServiceFactory.CreateDomainServiceFunc">
            <summary>
            The internal callback to create the new instance
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DomainServiceFactory.#ctor(System.Func{DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory,DotLogix.Architecture.Domain.Services.IDomainService})">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Services.Factories.DomainServiceFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DomainServiceFactory.Create(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Services.Factories.IDomainServiceFactory"/> using reflection and il code to create instances
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory.#ctor(DotLogix.Core.Reflection.Dynamics.DynamicCtor)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory.Create(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory.CreateFor``1">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory"/> using a constructor with the shape .ctor(<see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/>, <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory"/>)
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory.CreateFor(System.Type)">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory"/> using a constructor with the shape .ctor(<see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/>, <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory"/>)
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.Factories.IDomainServiceFactory">
            <summary>
            An interface representing a factory to create <see cref="T:DotLogix.Architecture.Domain.Services.IDomainService"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Factories.IDomainServiceFactory.Create(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.Services.IDomainService"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.IDomainService">
            <summary>
            A non generic marker interface for domain services
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.Providers.DomainServiceProvider">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.Services.Providers.IDomainServiceProvider"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.Services.Providers.DomainServiceProvider.ServiceFactories">
            <summary>
            The internal registered service factories
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Providers.DomainServiceProvider.Create``1(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Providers.DomainServiceProvider.RegisterFactory(System.Type,DotLogix.Architecture.Domain.Services.Factories.IDomainServiceFactory)">
            <summary>
            Register a new factory
            </summary>
            <param name="domainServiceType"></param>
            <param name="factory"></param>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Providers.DomainServiceProvider.RegisterFactory(System.Type)">
            <summary>
            Create a new <see cref="T:DotLogix.Architecture.Domain.Services.Factories.DynamicDomainServiceFactory"/> using a constructor with the shape .ctor(<see cref="T:DotLogix.Architecture.Domain.Context.IDomainContext"/>, <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory"/>)
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.Services.Providers.IDomainServiceProvider">
            <summary>
            An interface representing a provider for <see cref="T:DotLogix.Architecture.Domain.Services.IDomainService"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.Services.Providers.IDomainServiceProvider.Create``1(DotLogix.Architecture.Domain.Context.IDomainContext,DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory)">
            <summary>
            Create a new instance of a <see cref="T:DotLogix.Architecture.Domain.Services.IDomainService"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.IUnitOfWork">
            <summary>
            An interface to represent a unit of work
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext">
            <summary>
            An interface to represent a unit of work context
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext.UseRepository``1">
            <summary>
            Get or create an instance of <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.IRepository`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext.CompleteAsync">
            <summary>
            Complete this unit of work (in nested contexts this method will do nothing)
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory">
            <summary>
            An interface to represent a factory to create a <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContextFactory.BeginContext">
            <summary>
            Creates a new <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkFactory">
            <summary>
            An interface to represent a factory to create a <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWork"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.IUnitOfWorkFactory.Create">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWork"/>
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext">
            <summary>
            A wrapper class for a nested <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.ParentContext">
            <summary>
            The parent context
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.#ctor(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext)">
            <summary>
            Create a new instance of <see cref="T:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.BeginContext">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.UseRepository``1">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.CompleteAsync">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.NestedUnitOfWorkContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.UnitOfWork">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWork"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWork.EntityContextFactory">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWork.RepoProvider">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWork.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory,DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider)">
            <summary>
            Create a new instance of <see cref="T:DotLogix.Architecture.Domain.UoW.UnitOfWork"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWork.BeginContext">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext"/> wrapping a <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.EntityContext">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.RepoProvider">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.RepositoryInstances">
            <summary>
            The internal cached repository instances
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.#ctor(DotLogix.Architecture.Infrastructure.EntityContext.IEntityContext,DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider)">
            <summary>
            Create a new instance of <see cref="T:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.BeginContext">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.UseRepository``1">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.CompleteAsync">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions">
            <summary>
            A static class providing extension methods for <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWork"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.GetAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Guid)">
            <summary>
            Get a single entity by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.GetAllAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext)">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.FilterAllAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Get all entities matching an expression
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.GetRangeAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Get a range of entities by guid
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.Add``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,``0)">
            <summary>
            Add a single entity to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.AddRange``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of entities to the set
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.RemoveAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Guid)">
            <summary>
            Queries the matching entity and remove it
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.RemoveWhereAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Queries the matching entities and remove them
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkExtensions.RemoveRangeAsync``2(DotLogix.Architecture.Domain.UoW.IUnitOfWorkContext,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Queries the matching entity and remove it
            </summary>
        </member>
        <member name="T:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Architecture.Domain.UoW.IUnitOfWorkFactory"/> interface
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory.RepositoryProvider">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider"/>
            </summary>
        </member>
        <member name="P:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory.EntityContextFactory">
            <summary>
            The internal <see cref="T:DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory.#ctor(DotLogix.Architecture.Infrastructure.Repositories.Provider.IRepositoryProvider,DotLogix.Architecture.Infrastructure.EntityContext.IEntityContextFactory)">
            <summary>
            Create a new instance of <see cref="T:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Architecture.Domain.UoW.UnitOfWorkFactory.Create">
            <inheritdoc />
        </member>
    </members>
</doc>
