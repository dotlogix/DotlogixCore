<#@ template language="C#" #>
<#@ include file="MethodTemplates.ttinclude" once="true"#>
<#
    var type = typeof(Enumerable);
    var methods = type
            .GetMethods(BindingFlags.Public|BindingFlags.Static)
            .Where(m => m.Name != "ToHashSet")
            .OrderBy(m => m.Name)
            .ThenBy(m => m.GetGenericArguments().Length)
            .ThenBy(m => m.GetParameters().Length);
    var sb = new StringBuilder();
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using DotLogix.Core.Expressions;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {
<#
    foreach (var method in methods)
    {
#>
<#= WriteStaticMethod(sb.Clear(), method, true).ToString() #>

<#
    }
#>
    }
}