<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="C:\Program Files\dotnet\sdk\5.0.301\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll" #>
<#@ assembly name="C:\Users\alexa\source\git\c-sharp\DotLogix\Core\assemblies\Release\DotLogix.Core\netstandard2.0\DotLogix.Core.dll" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {
        public static LambdaBuilder<TResult> CallStatic<TResult>(this LambdaBuilder instance, Type type, string methodName, params LambdaBuilder[] args) {
            return CallStatic<TResult>(type, methodName, args.Prepend(instance));
        }

        public static LambdaBuilder<TResult> CallStatic<TResult>(this LambdaBuilder instance, Type type, string methodName, IEnumerable<LambdaBuilder> args) {
            return CallStatic<TResult>(type, methodName, args.Prepend(instance));
        }

        public static LambdaBuilder<TResult> CallStatic<TResult>(this LambdaBuilder instance, MethodInfo methodInfo, params LambdaBuilder[] args) {
            return CallStatic<TResult>(methodInfo, args.Prepend(instance));
        }

        public static LambdaBuilder<TResult> CallStatic<TResult>(this LambdaBuilder instance, MethodInfo methodInfo, IEnumerable<LambdaBuilder> args) {
            return CallStatic<TResult>(methodInfo, args.Prepend(instance));
        }

<#
    for (var i = 0; i <= 10; i++)
    {
        var range = Enumerable.Range(1, i).ToList();
        var genericNames = string.Join(", ", range.Select(r => $"T{r}").Prepend("T").Append("TResult"));
        var paramNames = string.Join(", ", range.Select(r => $"LambdaBuilder<T{r}> arg{r}"));
        var argNames = string.Join(", ", range.Select(r => $"arg{r}"));
#>
        public static LambdaBuilder<TResult> CallStatic<<#=genericNames#>>(this LambdaBuilder<T> instance, Func<<#=genericNames#>> method<#=paramNames.Length > 0 ? ", "+ paramNames : ""#>) {
            return CallStatic<TResult>(method.Method, instance<#=argNames.Length > 0 ? ", "+argNames : ""#>);
        }
<#
    }

#>
    }
}