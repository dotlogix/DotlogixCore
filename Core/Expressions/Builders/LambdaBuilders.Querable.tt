<#@ template language="C#" #>
<#@ include file="MethodTemplates.ttinclude" once="true"#>
<#
    var type = typeof(Queryable);
    var methods = type
            .GetMethods(BindingFlags.Public|BindingFlags.Static)
            .OrderBy(m => m.Name)
            .ThenBy(m => m.GetGenericArguments().Length)
            .ThenBy(m => m.GetParameters().Length);
    var sb = new StringBuilder();
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using DotLogix.Core.Expressions;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {        
        public static LambdaBuilder<IQueryable<T>> FromQueryable<T>(IQueryable<T> value) {
            return From<IQueryable<T>>(value.Expression);
        }
        public static LambdaBuilder<IQueryable> FromQueryable(IQueryable value) {
            return From<IQueryable>(value.Expression);
        }

<#
    foreach (var method in methods)
    {
#>
<#= WriteStaticMethod(sb.Clear(), method, true).ToString() #>

<#
    }
#>
    }
}