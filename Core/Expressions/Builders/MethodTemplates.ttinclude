<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="C:\Program Files\dotnet\sdk\5.0.301\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll" #>
<#@ assembly name="C:\Users\alexa\source\git\c-sharp\DotLogix\Core\assemblies\Release\DotLogix.Core\netstandard2.0\DotLogix.Core.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="DotLogix.Core.Extensions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq.Expressions" #>
<#+
    public string GetTypeName(Type type) => type.GetFriendlyGenericName();

    public StringBuilder WriteStaticMethod(StringBuilder stringBuilder, MethodInfo method, bool asExtension = false, bool preserveExpressions = false)
    {
        var name = method.Name;
        var parameters = method.GetParameters();
        var returnType = GetTypeName(method.ReturnType);

        if (preserveExpressions == false && parameters.Any(p => p.ParameterType.IsAssignableTo(typeof(Expression))))
        {
            WriteStaticMethod(stringBuilder, method, asExtension, true).AppendLine();
        }
        
        stringBuilder
            .Append(' ', 8)
            .Append("public static LambdaBuilder<")
            .Append(returnType)
            .Append("> ")
            .Append(name);
        
        WriteGenericArguments(stringBuilder, method);
        WriteMethodParameters(stringBuilder, parameters, asExtension, preserveExpressions);
        stringBuilder.Append("{").AppendLine();

        stringBuilder
            .Append(' ', 12)
            .Append("return CallStatic(")
            .Append(method.DeclaringType.Name)
            .Append('.')
            .Append(method.Name);
        
        WriteGenericArguments(stringBuilder, method);
        WriteMethodParameterNames(stringBuilder, parameters, preserveExpressions);
        
        stringBuilder.AppendLine(");");
        stringBuilder.Append(' ', 8).Append("}");
        
        return stringBuilder;
    }

    private StringBuilder WriteMethodParameters(StringBuilder stringBuilder, ParameterInfo[] parameters, bool asExtension = false, bool preserveExpressions = false)
    {
        stringBuilder.Append("(");
        if (asExtension && parameters.Length > 0)
        {
            stringBuilder.Append("this ");
        }

        return stringBuilder
            .AppendJoin(", ", parameters.Select(p =>
            {
                if (preserveExpressions && p.ParameterType.IsAssignableTo(typeof(Expression))) {
                    return $"{GetTypeName(p.ParameterType)} {p.Name}";
                }
                return $"LambdaBuilder<{GetTypeName(p.ParameterType)}> {p.Name}";
            }))
            .Append(")");
    }
    private static StringBuilder WriteMethodParameterNames(StringBuilder stringBuilder, ParameterInfo[] parameters, bool preserveExpressions)
    {
        if (parameters.Length == 0)
            return stringBuilder;
        
        stringBuilder.Append(", ").AppendJoin(", ", parameters.Select(p =>
        {
            if (preserveExpressions && p.ParameterType.IsAssignableTo(typeof(Expression)))
            {
                return $"Quote({p.Name})";
            }

            return p.Name;
        }));
        
        return stringBuilder;
    }
    private StringBuilder WriteGenericArguments(StringBuilder stringBuilder, MethodInfo methodInfo)
    {
        if (methodInfo.IsGenericMethod)
        {
            var arguments = methodInfo.GetGenericArguments();
            stringBuilder.Append("<").AppendJoin(", ", arguments.Select(GetTypeName)).Append(">");
        }
        return stringBuilder;
    }
#>