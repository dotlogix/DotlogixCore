<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotLogix.Nodes</name>
    </assembly>
    <members>
        <member name="T:DotLogix.Core.Nodes.CamelCaseNamingStrategy">
            <summary>
            A camelCase naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.CamelCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.ConverterSettings">
            <summary>
            Basic node converter settings
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.Default">
            <summary>
            The default settings
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.NamingStrategy">
            <summary>
            The naming strategy (camelCase by default)
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.TimeFormat">
            <summary>
            The time format (u by default)
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.NumberFormat">
            <summary>
            The number format (G by default)
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.GuidFormat">
            <summary>
            The guid format (D by default)
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.EnumFormat">
            <summary>
            The enum format (D by default)
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.ConverterSettings.FormatProvider">
            <summary>
            The format provider (invariant by default)
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.ArrayNodeConverter`1">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to convert arrays
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ArrayNodeConverter`1.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.ArrayNodeConverter`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ArrayNodeConverter`1.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ArrayNodeConverter`1.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.CollectionNodeConverter`1">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to convert arrays
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.CollectionNodeConverter`1.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.CollectionNodeConverter`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.CollectionNodeConverter`1.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.CollectionNodeConverter`1.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter">
            <summary>
            An interface to represent a node converter
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter.DataType">
            <summary>
            The data type
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <summary>
            Write the value to the node writer
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert the node to an object of the target type
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.KeyValuePairNodeConverter">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to convert key value pairs
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.KeyValuePairNodeConverter.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.KeyValuePairNodeConverter"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.KeyValuePairNodeConverter.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.KeyValuePairNodeConverter.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.NodeConverter">
            <summary>
            A base class for node converters
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.NodeConverter.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.NodeConverter"/>
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Converters.NodeConverter.Type">
            <inheritdoc />
        </member>
        <member name="P:DotLogix.Core.Nodes.Converters.NodeConverter.DataType">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.NodeConverter.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.NodeConverter.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.ObjectNodeConverter">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to convert objects
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Converters.ObjectNodeConverter.DynamicType">
            <summary>
            The dynamic type
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ObjectNodeConverter.#ctor(DotLogix.Core.Types.DataType,DotLogix.Core.Reflection.Dynamics.AccessorTypes,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.ObjectNodeConverter"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ObjectNodeConverter.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ObjectNodeConverter.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.OptionalNodeConverter`1">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to optional values
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.OptionalNodeConverter`1.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.OptionalNodeConverter`1"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.OptionalNodeConverter`1.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.OptionalNodeConverter`1.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Converters.ValueNodeConverter">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Converters.IAsyncNodeConverter"/> interface to convert primitives
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ValueNodeConverter.#ctor(DotLogix.Core.Types.DataType)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Converters.ValueNodeConverter"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ValueNodeConverter.WriteAsync(System.Object,System.String,DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Converters.ValueNodeConverter.ConvertToObject(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.DynamicNode">
            <summary>
            Creates a dynamic object with a internal hierarchy structure cast-able to matching types
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.DynamicNode.Node">
            <summary>
            The internal node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.From(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Creates a dynamic object using a existing node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.Map(DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Creates a dynamic object using a new node map
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.DynamicNode.List(DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Creates a dynamic object using a ne node list
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory">
            <summary>
            An interface representing a factory to create node converters
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.INodeConverterFactory.CreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType)">
            <summary>
            Create a new node converter
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.INodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <summary>
            Try to create a new node converter
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.KeyValuePairNodeConverterFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/> for key value pairs
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.KeyValuePairNodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.ListNodeConverterFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/> for collection types
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.ListNodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.NodeConverterFactoryBase">
            <summary>
            An base class implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.NodeConverterFactoryBase.CreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.NodeConverterFactoryBase.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.ObjectNodeConverterFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/> for objects
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.ObjectNodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.OptionalNodeConverterFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/> for optional values
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.OptionalNodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Factories.ValueNodeConverterFactory">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Factories.INodeConverterFactory"/> for primitives
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Factories.ValueNodeConverterFactory.TryCreateConverter(DotLogix.Core.Nodes.NodeTypes,DotLogix.Core.Types.DataType,DotLogix.Core.Nodes.Converters.IAsyncNodeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.JsonFormatterSettings">
            <summary>
            Basic node converter settings for json data
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.JsonFormatterSettings.Idented">
            <summary>
            Creates new json settings with ident
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.JsonFormatterSettings.Default">
            <summary>
            Creates new json settings
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.JsonFormatterSettings.Ident">
            <summary>
            Determines if the json text should be idented
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.JsonFormatterSettings.IdentSize">
            <summary>
            The amount of spaces to insert for ident (4 by default)
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.JsonNodes">
            <summary>
            A static class providing extension methods for <see cref="T:DotLogix.Core.Nodes.Node"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNode``1(System.String)">
            <summary>
            Convert json text to node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNodeAsync``1(System.IO.TextReader)">
            <summary>
            Convert json text to node asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNodeAsync``1(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Convert json text to node asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNode(System.String)">
            <summary>
            Convert json text to node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNodeAsync(System.IO.TextReader)">
            <summary>
            Convert json text to node asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToNodeAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Convert json text to node asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJson(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert a node to json text
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(DotLogix.Core.Nodes.Node,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert a node to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(DotLogix.Core.Nodes.Node,System.IO.Stream,System.Text.Encoding,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert a node to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(DotLogix.Core.Nodes.Node,System.IO.TextWriter,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert a node to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJson(System.Object,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJson(System.Object,System.Type,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,System.IO.Stream,System.Text.Encoding,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,System.IO.TextWriter,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,System.Type,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,System.Type,System.IO.Stream,System.Text.Encoding,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.ToJsonAsync(System.Object,System.Type,System.IO.TextWriter,DotLogix.Core.Nodes.JsonFormatterSettings)">
            <summary>
            Convert an object to json text asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJson``1(System.String,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJsonAsync``1(System.IO.Stream,System.Text.Encoding,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJsonAsync``1(System.IO.TextReader,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJson(System.String,System.Type,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJsonAsync(System.IO.TextReader,System.Type,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object asynchronously
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.JsonNodes.FromJsonAsync(System.IO.Stream,System.Text.Encoding,System.Type,DotLogix.Core.Nodes.ConverterSettings)">
            <summary>
            Convert json text to an instance of object asynchronously
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.KebapCaseNamingStrategy">
            <summary>
            A kebap-case naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.KebapCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.LowerCaseNamingStrategy">
            <summary>
            A lowercase naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.LowerCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.NamingStrategies">
            <summary>
            Common naming strategies
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.CamelCase">
            <summary>
            A camelCase naming strategy
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.KebapCase">
            <summary>
            A kebap-case naming strategy
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.LowerCase">
            <summary>
            A lowercase naming strategy
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.PascalCase">
            <summary>
            A PascalCase naming strategy
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.SnakeCase">
            <summary>
            A snake_case naming strategy
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.NamingStrategies.UpperCase">
            <summary>
            A UPPERCASE naming strategy
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.NamingStrategyBase">
            <summary>
            A base class for naming strategies
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.NamingStrategyBase.TransformName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.NamingStrategyBase.AppendName(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.NamingStrategyBase.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <summary>
            Transform the name according to the naming strategy and append it to the string builder
            </summary>
            <returns>true if the name was transformed, otherwise false</returns>
        </member>
        <member name="T:DotLogix.Core.Nodes.PascalCaseNamingStrategy">
            <summary>
            A PascalCase naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.PascalCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.IAsyncNodeReader">
            <summary>
            An interface to represent node readers
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeReader.CopyToAsync(DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <summary>
            Copies all nodes to a node writer
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeReader.ReadAsync">
            <summary>
            Read the nodes as node operations
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter">
            <summary>
            An interface to represent node writers
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.BeginMapAsync">
            <summary>
            Starts a new map node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.BeginMapAsync(System.String)">
            <summary>
            Starts a new map node with a name
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.EndMapAsync">
            <summary>
            End the current map node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.BeginListAsync">
            <summary>
            Starts a new list node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.BeginListAsync(System.String)">
            <summary>
            Starts a new list node with a name
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.EndListAsync">
            <summary>
            End the current list node
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.WriteValueAsync(System.String,System.Object)">
            <summary>
            Writes a primitive value with a name
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.WriteValueAsync(System.Object)">
            <summary>
            Writes a primitive value
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.AutoCompleteAsync">
            <summary>
            Auto close all open collections and finish the writing process
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter.ExecuteAsync(DotLogix.Core.Nodes.Processor.NodeOperation)">
            <summary>
            Execute a node operation
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.INamingStrategy">
            <summary>
            An interface to represent naming strategies
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.INamingStrategy.TransformName(System.String)">
            <summary>
            Transform the name according to the naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.INamingStrategy.AppendName(System.String,System.Text.StringBuilder)">
            <summary>
            Append the name according to the naming strategy to a string builder
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.JsonNodeReader">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Processor.IAsyncNodeReader"/> interface to read json text
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter">
            <summary>
            A json instruction character
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.End">
            <summary>
            The end of the character stream
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.OpenObject">
            <summary>
            The open object character {
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.CloseObject">
            <summary>
            The close object character }
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.OpenList">
            <summary>
            The open list character [
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.CloseList">
            <summary>
            The close list character ]
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.String">
            <summary>
            The begin of a string "
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.ValueAssignment">
            <summary>
            The value assignment character :
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.ValueDelimiter">
            <summary>
            The value delimiter character ,
            </summary>
        </member>
        <member name="F:DotLogix.Core.Nodes.Processor.JsonNodeReader.JsonCharacter.Other">
            <summary>
            Another unknown character
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeReader.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Processor.JsonNodeReader"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Processor.JsonNodeReader"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeReader.CopyToAsync(DotLogix.Core.Nodes.Processor.IAsyncNodeWriter)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.JsonNodeWriter">
            <summary>
            An implementation of the <see cref="T:DotLogix.Core.Nodes.Processor.IAsyncNodeWriter"/> interface to write json text
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.#ctor(System.IO.TextWriter,DotLogix.Core.Nodes.JsonFormatterSettings,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Processor.JsonNodeReader"/>
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.BeginMapAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.EndMapAsync">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.BeginListAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.EndListAsync">
            <inheritdoc />
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonNodeWriter.WriteValueAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.JsonParsingException">
            <summary>
            An exception thrown by a json parser
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Processor.JsonParsingException.Position">
            <summary>
            The current character position
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Processor.JsonParsingException.Line">
            <summary>
            The line number
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Processor.JsonParsingException.LinePosition">
            <summary>
            The position in line
            </summary>
        </member>
        <member name="P:DotLogix.Core.Nodes.Processor.JsonParsingException.Near">
            <summary>
            The context characters in front of the error
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonParsingException.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:DotLogix.Core.Nodes.Processor.JsonParsingException"/>
            </summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.Processor.JsonStrings">
            <summary>
            A static class providing extension methods for json strings
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.UnescapeJsonString(System.String,System.Boolean)">
            <summary>
            Unescapes a json formatted string
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.UnescapeJsonString(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unescapes a json formatted string
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.EscapeJsonString(System.String,System.Boolean)">
            <summary>
            Escapes a json formatted string
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.AppendJsonString(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Escapes a json formatted string and append it to a string builder
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.ToCharAsUnicode(System.Int32)">
            <summary>
            Creates a hex encoded version for a unicode character
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.ToCharAsUnicode(System.Int32,System.Char[])">
            <summary>
            Creates a hex encoded version for a unicode character
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.ToCharAsUnicode(System.Int32,System.Char[]@)">
            <summary>
            Creates a hex encoded version for a unicode character
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.FromCharAsUnicode(System.Char[],System.Int32)">
            <summary>
            Parses a hex encoded version of a unicode character
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.IntToHex(System.Int32)">
            <summary>
            Quick conversion of an int to a hex character
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.HexToInt(System.Int32)">
            <summary>
            Quick conversion of an hex character to an int
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.JsonStrings.IsHex(System.Int32)">
            <summary>
            Check if an integer is a hex value (0-15)
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.NodeOperation.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="M:DotLogix.Core.Nodes.Processor.NodeReaderBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:DotLogix.Core.Nodes.SnakeCaseNamingStrategy">
            <summary>
            A snake_case naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.SnakeCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:DotLogix.Core.Nodes.UpperCaseNamingStrategy">
            <summary>
            A UPPERCASE naming strategy
            </summary>
        </member>
        <member name="M:DotLogix.Core.Nodes.UpperCaseNamingStrategy.TransformIfRequired(System.String,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
