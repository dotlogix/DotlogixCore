<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="C:\Program Files\dotnet\sdk\5.0.301\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll" #>
<#@ assembly name="C:\Users\alexa\source\git\c-sharp\DotLogix\Core\assemblies\Release\DotLogix.Core\netstandard2.0\DotLogix.Core.dll" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using DotLogix.Core.Extensions;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {
        public static Expression<TDelegate> ToLambda<TDelegate>(this LambdaBuilder instance, params ParameterExpression[] parameters) where TDelegate : Delegate {
            return ToLambda<TDelegate>(instance, parameters.AsEnumerable());
        }

        public static Expression<TDelegate> ToLambda<TDelegate>(this LambdaBuilder instance, IEnumerable<ParameterExpression> parameters) where TDelegate : Delegate {
            var arguments = typeof(TDelegate).GetGenericArguments();
            var parameterList = parameters.AsReadOnlyList();

            if(arguments.Length - 1 != parameterList.Count) {
                throw new ArgumentException($"Invalid amount of parameters, expected {arguments.Length} but got {parameterList.Count}", nameof(parameters));
            }
            
            return Expression.Lambda<TDelegate>(instance, parameterList);
        }

<#
    for (var i = 0; i <= 10; i++)
    {
        var range = Enumerable.Range(1, i).ToList();
        var genericNames = string.Join(", ", range.Select(r => $"T{r}").Append("TResult"));
        var paramNames = string.Join(", ", range.Select(r => $"ParameterExpression arg{r}"));
        var argNames = string.Join(", ", range.Select(r => $"arg{r}"));
#>
        public static Expression<Func<<#=genericNames#>>> Lambda<<#=genericNames#>>(this LambdaBuilder<TResult> instance<#=paramNames.Length > 0 ? ", "+ paramNames : ""#>) {
            return ToLambda<Func<<#=genericNames#>>>(instance<#=argNames.Length > 0 ? ", "+argNames : ""#>);
        }
<#
    }

#>
    }
}