<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="C:\Program Files\dotnet\sdk\5.0.301\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll" #>
<#@ assembly name="C:\Users\alexa\source\git\c-sharp\DotLogix\Core\assemblies\Debug\DotLogix.Core\netstandard2.0\DotLogix.Core.dll" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using DotLogix.Core.Expressions;

namespace DotLogix.Core.Expressions {
    public static partial class LambdaBuilders {
        public static LambdaBuilder<TResult> Inline<TResult>(LambdaExpression expression, params LambdaBuilder[] args) {
            return Inline(expression, args.AsEnumerable()).Body;
        }

        public static LambdaBuilder<TResult> Inline<TResult>(LambdaExpression expression, IEnumerable<LambdaBuilder> args) {
            return Inline(expression, args).Body;
        }

        public static LambdaBuilder Inline(LambdaExpression expression, params LambdaBuilder[] args) {
            return Inline(expression, args.AsEnumerable());
        }

        public static LambdaBuilder Inline(LambdaExpression expression, IEnumerable<LambdaBuilder> args) {
            var rewriter = new RewritingExpressionVisitor();
            var parameters = expression.Parameters;
            var idx = 0;
            foreach(var arg in args) {
                var parameter = parameters[idx];
                var argument = arg.Cast(parameter.Type);
                rewriter.RewriteParameter(parameter, argument.Body);
                idx++;
            }

            if(idx < parameters.Count) {
                throw new ArgumentException($"Not enough parameters. Expected {parameters.Count}, but got {idx}");
            }

            var rewritten = rewriter.Visit(expression.Body);
            return new LambdaBuilder(rewritten, expression.Type);
        }

<#
    for (var i = 0; i <= 10; i++)
    {
        var range = Enumerable.Range(1, i).ToList();
        var genericNames = string.Join(", ", range.Select(r => $"T{r}").Append("TResult").Prepend	("T"));
        var paramNames = string.Join(", ", range.Select(r => $"LambdaBuilder<T{r}> arg{r}"));
        var argNames = string.Join(", ", range.Select(r => $"arg{r}"));
#>
        public static LambdaBuilder<TResult> Inline<<#=genericNames#>>(Expression<Func<<#=genericNames#>>> expression<#=paramNames.Length > 0 ? ", "+ paramNames : ""#>) {
            return Inline<TResult>((LambdaExpression)expression<#=argNames.Length > 0 ? ", "+argNames : ""#>);
        }
<#
    }

#>
    }
}